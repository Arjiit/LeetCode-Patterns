class Solution {
    int minSum = Integer.MAX_VALUE;
    
    public int minimumTotal(List<List<Integer>> triangle) {
        
        getMinimumTotal(0,triangle, 0, 0);
        return minSum;
    }
    
    public void getMinimumTotal(int sum, List<List<Integer>> triangle, int level, int i) {
        if (level == triangle.size()) {
            if (sum < minSum) {
                minSum = sum;
            }
            return;
        }
        int a =  triangle.get(level).get(i);
        getMinimumTotal(sum + a, triangle, level + 1, i);
        if (i < level) {
        int b = triangle.get(level).get(i+1);
        getMinimumTotal(sum +b, triangle, level+1, i+1);
        }
    }
}

/*
using DP
*/

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        // minPath[k,i] = min(minPath[k+1,i], minPath[k+1,i+1]) + triangle[k][i]
        
        /*
                [2]
              [5, 6]
            [11, 10, 13]
          [15, 11, 18, 16]
          
        */
        if (triangle.size() == 0) {
            return 0;
        }
        
        if (triangle.size() == 1) {
            return triangle.get(0).get(0);
        }
        
        int min = Integer.MAX_VALUE;
        
        for(int k =1; k< triangle.size(); k++) {
            for (int i=0; i< triangle.get(k).size(); i++){
                int topLeft = (i - 1 >= 0) ? triangle.get(k-1).get(i-1) : Integer.MAX_VALUE;
                int topRight = (i <= triangle.get(k-1).size() -1) ? triangle.get(k-1).get(i) : Integer.MAX_VALUE;
                
                int pathSum = triangle.get(k).get(i) + Math.min(topLeft, topRight);
                triangle.get(k).set(i, pathSum);
                
                if (k == triangle.size() - 1) {
                    min = Math.min(min, pathSum);
                }
                
            }
        }
        return min;
    }
    
}